=head1 Rakudo Perl 6

This is Rakudo Perl, a Perl 6 compiler for the Parrot virtual machine.

Rakudo Perl is Copyright (C) 2008-2009, The Perl Foundation.
Rakudo Perl is distributed under the terms of the Artistic License 2.0.
For more details, see the full text of the license in the file LICENSE.

=head2 Build requirements

For building Rakudo you need a C compiler, a C<make> utility, a Perl 5
compiler, version 5.8 or newer,  the C<icu> library 
(L<http://site.icu-project.org/>) and the C<svn>
command from Subversion.

For example on Debian GNU/Linux you can install those with the command

    aptitude install build-essential libicu-dev subversion

(Perl is installed by default already). To enable parallel testing you
also need the CPAN module L<Test::Harness> in version 3.16 or newer;
you can control the number of parallel jobs with the C<TEST_JOBS>
environment variable.

=head2 Building and invoking Rakudo

Because Rakudo is under rapid development, we generally recommend
downloading Rakudo directly from github and building from there:

    $ git clone git://github.com/rakudo/rakudo.git

If you don't have git installed, you can get a tarball or zip of Rakudo 
from github by visiting http://github.com/rakudo/rakudo/tree/master 
and clicking "Download".  Then unpack the tarball or zip.

Once you have a copy of Rakudo, build it as follows:

    $ cd rakudo
    $ perl Configure.pl --gen-parrot
    $ make

This will create a "perl6" or "perl6.exe" executable in the
current (rakudo) directory.

The C<--gen-parrot> option tells Configure.pl to automatically 
download and build the most appropriate version of Parrot into 
a local "parrot/" subdirectory, install that Parrot into
the "parrot_install/" subdirectory, and use that for building
Rakudo.  It's okay to use the C<--gen-parrot> option on later 
invocations of Configure.pl; the configure system will re-build 
Parrot only if a newer version is needed for whatever version 
of Rakudo you're working with.

You can use C<--parrot-config=/path/to/parrot_config> instead
of C<--gen-parrot> to point to an already installed Parrot that
must include its development environment. You can build such a
Parrot from source using Parrot's C<make install-dev> target, or
install prebuilt C<parrot-devel> and/or C<libparrot-dev> packages.
The version of this already installed Parrot must satisfy a
minimum specified by the Rakudo being built. The latest version of
Rakudo (called HEAD on github) often requires one newer than
the preceding monthly Parrot release.

Rakudo's C<make install> target will install Rakudo and its
libraries into the Parrot installation that was used to create it.

To run a Perl 6 program in the Rakudo build directory, issue a
commands like:

    $ ./perl6 hello.pl

To run Perl 6 programs in any directory, install Rakudo with the
C<make install> command. You can then refer to
C<parrot_install/bin/perl6> with a symbolic link, shell alias or
search path and then use:

    $ perl6 hello.pl

If the Rakudo compiler is invoked without an explicit script to
run, it enters a small interactive mode that allows Perl 6 statements 
to be executed from the command line.  Each line entered is treated
as a separate compilation unit, however (which means that subroutines
are preserved after they are defined, but variables are not).

=head2 Running the test suite

Entering C<make test> will run a small test suite that comes 
bundled with Rakudo.  This is a simple suite of tests, designed
to make sure that the Rakudo compiler is basically working and that
it's capable of running a simple test harness.

Running C<make spectest> will import the official Perl 6 test suite
from the Pugs repository
L<http://svn.pugscode.org/pugs/t/spec/> and run all of these tests that
are currently known to pass.

At present we do not have any plans to directly store the
official test suite as part of the Rakudo/Parrot repository,
but will continue to fetch it from the Pugs repository.

You can also use "make" to run an individual test from the command line:

    $ make t/spec/S29-str/ucfirst.t
    t/spec/S29-str/ucfirst.rakudo .. 
    1..4
    ok 1 - simple
    ok 2 - empty string
    ok 3 - # SKIP unicode
    ok 4 - # SKIP unicode
    # FUDGED!
    ok
    All tests successful.
    Files=1, Tests=4,  1 wallclock secs ( 0.02 usr  0.00 sys +  0.57 cusr  0.06 csys =  0.65 CPU)
    Result: PASS

If you want to run the tests in parallel, you need to install a
fairly recent version of the Perl 5 module L<Test::Harness> (3.16
works for sure).

=head2 Where to get help or answers to questions

There are several mailing lists, IRC channels, and wikis available
with help for Perl 6 and Rakudo on Parrot.  Figuring out the right
one to use is often the biggest battle.  Here are some rough
guidelines:

If you have a question about Perl 6 syntax or the right way to
approach a problem using Perl 6, you probably want the
C<perl6-users@perl.org> mailing list.  This list is primarily
for the people who want to I<use> Perl 6 to write programs, as
opposed to those who are implementing or developing the Perl 6
language itself.

Questions about the Rakudo compiler for Parrot and the Parrot
compiler tools can go to C<perl6-compiler@perl.org>.  Discussion
about Parrot itself generally takes place on
C<parrot-dev@lists.parrot.org>.

The Rakudo and Parrot development teams tend to hang out on IRC a fair
bit, either on C<irc.freenode.net/#perl6> or C<irc.perl.org/#parrot>.

Rakudo's official web site is L<http://rakudo.org/>, where you can
find useful information for developers and users alike. There's also
a Parrot blog at L<http://parrotblog.org/>, most Perl 6 related news is
assembled at L<http://planetsix.perl.org/>. Links to many other
resources can be found on L<http://perl6-projects.org/>.

=head2 Reporting bugs

Bug reports should be sent to C<rakudobug@perl.org> with the moniker
[BUG] (including the brackets) at the start of the subject so that
it gets appropriately tagged in the RT system (https://rt.perl.org/rt3/).
Please include or attach any sample source code that exhibits the
bug, and include either the release name/date or the git commit
identifier. You find that identifier in the first output line of 
the C<git log> command.  There's no need to cc: the perl6-compiler
mailing list, as the RT system will handle this on its own.

=head2 Submitting patches

If you have a patch that fixes a bug or adds a new feature, please
submit it to C<rakudobug@perl.org> with the moniker [PATCH]
(including the brackets) at the start of the subject line.  We'll
generally accept patches in any form if we can get them to work,
but unified diff from the C<git> command is greatly preferred.  In
general this means that in the C<languages/rakudo/> directory you make your
changes, and then type

    git commit -m 'Your commit message'
    git format-patch HEAD^

This will generate a file called C<001-your-commit-message.patch>, or more of
them if you made multiple commits; please attach these to your email.

(Note to the maintainers: you can apply these patches with the
C<git-am> command; it preserves meta information like author).

Other ways to create and submit patches are discussed here:
L<http://wiki.github.com/rakudo/rakudo/steps-to-create-a-patch>.

=head2 How the compiler works

See F<docs/compiler_overview.pod>.

=head1 AUTHOR

Patrick Michaud C<pmichaud@pobox.com> is the primary author and
maintainer for Rakudo Perl 6 on Parrot.

=cut

## vim: expandtab sw=4 ft=pod tw=70:
